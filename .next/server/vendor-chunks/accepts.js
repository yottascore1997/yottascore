"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/accepts";
exports.ids = ["vendor-chunks/accepts"];
exports.modules = {

/***/ "(rsc)/./node_modules/accepts/index.js":
/*!***************************************!*\
  !*** ./node_modules/accepts/index.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*!\n * accepts\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */ \n/**\n * Module dependencies.\n * @private\n */ var Negotiator = __webpack_require__(/*! negotiator */ \"(rsc)/./node_modules/negotiator/index.js\");\nvar mime = __webpack_require__(/*! mime-types */ \"(rsc)/./node_modules/mime-types/index.js\");\n/**\n * Module exports.\n * @public\n */ module.exports = Accepts;\n/**\n * Create a new Accepts object for the given req.\n *\n * @param {object} req\n * @public\n */ function Accepts(req) {\n    if (!(this instanceof Accepts)) {\n        return new Accepts(req);\n    }\n    this.headers = req.headers;\n    this.negotiator = new Negotiator(req);\n}\n/**\n * Check if the given `type(s)` is acceptable, returning\n * the best match when true, otherwise `undefined`, in which\n * case you should respond with 406 \"Not Acceptable\".\n *\n * The `type` value may be a single mime type string\n * such as \"application/json\", the extension name\n * such as \"json\" or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\n * or array is given the _best_ match, if any is returned.\n *\n * Examples:\n *\n *     // Accept: text/html\n *     this.types('html');\n *     // => \"html\"\n *\n *     // Accept: text/*, application/json\n *     this.types('html');\n *     // => \"html\"\n *     this.types('text/html');\n *     // => \"text/html\"\n *     this.types('json', 'text');\n *     // => \"json\"\n *     this.types('application/json');\n *     // => \"application/json\"\n *\n *     // Accept: text/*, application/json\n *     this.types('image/png');\n *     this.types('png');\n *     // => undefined\n *\n *     // Accept: text/*;q=.5, application/json\n *     this.types(['html', 'json']);\n *     this.types('html', 'json');\n *     // => \"json\"\n *\n * @param {String|Array} types...\n * @return {String|Array|Boolean}\n * @public\n */ Accepts.prototype.type = Accepts.prototype.types = function(types_) {\n    var types = types_;\n    // support flattened arguments\n    if (types && !Array.isArray(types)) {\n        types = new Array(arguments.length);\n        for(var i = 0; i < types.length; i++){\n            types[i] = arguments[i];\n        }\n    }\n    // no types, return all requested types\n    if (!types || types.length === 0) {\n        return this.negotiator.mediaTypes();\n    }\n    // no accept header, return first given type\n    if (!this.headers.accept) {\n        return types[0];\n    }\n    var mimes = types.map(extToMime);\n    var accepts = this.negotiator.mediaTypes(mimes.filter(validMime));\n    var first = accepts[0];\n    return first ? types[mimes.indexOf(first)] : false;\n};\n/**\n * Return accepted encodings or best fit based on `encodings`.\n *\n * Given `Accept-Encoding: gzip, deflate`\n * an array sorted by quality is returned:\n *\n *     ['gzip', 'deflate']\n *\n * @param {String|Array} encodings...\n * @return {String|Array}\n * @public\n */ Accepts.prototype.encoding = Accepts.prototype.encodings = function(encodings_) {\n    var encodings = encodings_;\n    // support flattened arguments\n    if (encodings && !Array.isArray(encodings)) {\n        encodings = new Array(arguments.length);\n        for(var i = 0; i < encodings.length; i++){\n            encodings[i] = arguments[i];\n        }\n    }\n    // no encodings, return all requested encodings\n    if (!encodings || encodings.length === 0) {\n        return this.negotiator.encodings();\n    }\n    return this.negotiator.encodings(encodings)[0] || false;\n};\n/**\n * Return accepted charsets or best fit based on `charsets`.\n *\n * Given `Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5`\n * an array sorted by quality is returned:\n *\n *     ['utf-8', 'utf-7', 'iso-8859-1']\n *\n * @param {String|Array} charsets...\n * @return {String|Array}\n * @public\n */ Accepts.prototype.charset = Accepts.prototype.charsets = function(charsets_) {\n    var charsets = charsets_;\n    // support flattened arguments\n    if (charsets && !Array.isArray(charsets)) {\n        charsets = new Array(arguments.length);\n        for(var i = 0; i < charsets.length; i++){\n            charsets[i] = arguments[i];\n        }\n    }\n    // no charsets, return all requested charsets\n    if (!charsets || charsets.length === 0) {\n        return this.negotiator.charsets();\n    }\n    return this.negotiator.charsets(charsets)[0] || false;\n};\n/**\n * Return accepted languages or best fit based on `langs`.\n *\n * Given `Accept-Language: en;q=0.8, es, pt`\n * an array sorted by quality is returned:\n *\n *     ['es', 'pt', 'en']\n *\n * @param {String|Array} langs...\n * @return {Array|String}\n * @public\n */ Accepts.prototype.lang = Accepts.prototype.langs = Accepts.prototype.language = Accepts.prototype.languages = function(languages_) {\n    var languages = languages_;\n    // support flattened arguments\n    if (languages && !Array.isArray(languages)) {\n        languages = new Array(arguments.length);\n        for(var i = 0; i < languages.length; i++){\n            languages[i] = arguments[i];\n        }\n    }\n    // no languages, return all requested languages\n    if (!languages || languages.length === 0) {\n        return this.negotiator.languages();\n    }\n    return this.negotiator.languages(languages)[0] || false;\n};\n/**\n * Convert extnames to mime.\n *\n * @param {String} type\n * @return {String}\n * @private\n */ function extToMime(type) {\n    return type.indexOf(\"/\") === -1 ? mime.lookup(type) : type;\n}\n/**\n * Check if mime is valid.\n *\n * @param {String} type\n * @return {String}\n * @private\n */ function validMime(type) {\n    return typeof type === \"string\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/accepts/index.js\n");

/***/ })

};
;