"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/base64id";
exports.ids = ["vendor-chunks/base64id"];
exports.modules = {

/***/ "(rsc)/./node_modules/base64id/lib/base64id.js":
/*!***********************************************!*\
  !*** ./node_modules/base64id/lib/base64id.js ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/*!\n * base64id v0.1.0\n */ /**\n * Module dependencies\n */ \nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\n/**\n * Constructor\n */ var Base64Id = function() {};\n/**\n * Get random bytes\n *\n * Uses a buffer if available, falls back to crypto.randomBytes\n */ Base64Id.prototype.getRandomBytes = function(bytes) {\n    var BUFFER_SIZE = 4096;\n    var self = this;\n    bytes = bytes || 12;\n    if (bytes > BUFFER_SIZE) {\n        return crypto.randomBytes(bytes);\n    }\n    var bytesInBuffer = parseInt(BUFFER_SIZE / bytes);\n    var threshold = parseInt(bytesInBuffer * 0.85);\n    if (!threshold) {\n        return crypto.randomBytes(bytes);\n    }\n    if (this.bytesBufferIndex == null) {\n        this.bytesBufferIndex = -1;\n    }\n    if (this.bytesBufferIndex == bytesInBuffer) {\n        this.bytesBuffer = null;\n        this.bytesBufferIndex = -1;\n    }\n    // No buffered bytes available or index above threshold\n    if (this.bytesBufferIndex == -1 || this.bytesBufferIndex > threshold) {\n        if (!this.isGeneratingBytes) {\n            this.isGeneratingBytes = true;\n            crypto.randomBytes(BUFFER_SIZE, function(err, bytes) {\n                self.bytesBuffer = bytes;\n                self.bytesBufferIndex = 0;\n                self.isGeneratingBytes = false;\n            });\n        }\n        // Fall back to sync call when no buffered bytes are available\n        if (this.bytesBufferIndex == -1) {\n            return crypto.randomBytes(bytes);\n        }\n    }\n    var result = this.bytesBuffer.slice(bytes * this.bytesBufferIndex, bytes * (this.bytesBufferIndex + 1));\n    this.bytesBufferIndex++;\n    return result;\n};\n/**\n * Generates a base64 id\n *\n * (Original version from socket.io <http://socket.io>)\n */ Base64Id.prototype.generateId = function() {\n    var rand = Buffer.alloc(15); // multiple of 3 for base64\n    if (!rand.writeInt32BE) {\n        return Math.abs(Math.random() * Math.random() * Date.now() | 0).toString() + Math.abs(Math.random() * Math.random() * Date.now() | 0).toString();\n    }\n    this.sequenceNumber = this.sequenceNumber + 1 | 0;\n    rand.writeInt32BE(this.sequenceNumber, 11);\n    if (crypto.randomBytes) {\n        this.getRandomBytes(12).copy(rand);\n    } else {\n        // not secure for node 0.4\n        [\n            0,\n            4,\n            8\n        ].forEach(function(i) {\n            rand.writeInt32BE(Math.random() * Math.pow(2, 32) | 0, i);\n        });\n    }\n    return rand.toString(\"base64\").replace(/\\//g, \"_\").replace(/\\+/g, \"-\");\n};\n/**\n * Export\n */ exports = module.exports = new Base64Id();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmFzZTY0aWQvbGliL2Jhc2U2NGlkLmpzIiwibWFwcGluZ3MiOiJBQUFBOztDQUVDLEdBRUQ7O0NBRUM7QUFFRCxJQUFJQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUVyQjs7Q0FFQyxHQUVELElBQUlDLFdBQVcsWUFBYTtBQUU1Qjs7OztDQUlDLEdBRURBLFNBQVNDLFNBQVMsQ0FBQ0MsY0FBYyxHQUFHLFNBQVNDLEtBQUs7SUFFaEQsSUFBSUMsY0FBYztJQUNsQixJQUFJQyxPQUFPLElBQUk7SUFFZkYsUUFBUUEsU0FBUztJQUVqQixJQUFJQSxRQUFRQyxhQUFhO1FBQ3ZCLE9BQU9OLE9BQU9RLFdBQVcsQ0FBQ0g7SUFDNUI7SUFFQSxJQUFJSSxnQkFBZ0JDLFNBQVNKLGNBQVlEO0lBQ3pDLElBQUlNLFlBQVlELFNBQVNELGdCQUFjO0lBRXZDLElBQUksQ0FBQ0UsV0FBVztRQUNkLE9BQU9YLE9BQU9RLFdBQVcsQ0FBQ0g7SUFDNUI7SUFFQSxJQUFJLElBQUksQ0FBQ08sZ0JBQWdCLElBQUksTUFBTTtRQUNoQyxJQUFJLENBQUNBLGdCQUFnQixHQUFHLENBQUM7SUFDNUI7SUFFQSxJQUFJLElBQUksQ0FBQ0EsZ0JBQWdCLElBQUlILGVBQWU7UUFDMUMsSUFBSSxDQUFDSSxXQUFXLEdBQUc7UUFDbkIsSUFBSSxDQUFDRCxnQkFBZ0IsR0FBRyxDQUFDO0lBQzNCO0lBRUEsdURBQXVEO0lBQ3ZELElBQUksSUFBSSxDQUFDQSxnQkFBZ0IsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDQSxnQkFBZ0IsR0FBR0QsV0FBVztRQUVwRSxJQUFJLENBQUMsSUFBSSxDQUFDRyxpQkFBaUIsRUFBRTtZQUMzQixJQUFJLENBQUNBLGlCQUFpQixHQUFHO1lBQ3pCZCxPQUFPUSxXQUFXLENBQUNGLGFBQWEsU0FBU1MsR0FBRyxFQUFFVixLQUFLO2dCQUNqREUsS0FBS00sV0FBVyxHQUFHUjtnQkFDbkJFLEtBQUtLLGdCQUFnQixHQUFHO2dCQUN4QkwsS0FBS08saUJBQWlCLEdBQUc7WUFDM0I7UUFDRjtRQUVBLDhEQUE4RDtRQUM5RCxJQUFJLElBQUksQ0FBQ0YsZ0JBQWdCLElBQUksQ0FBQyxHQUFHO1lBQy9CLE9BQU9aLE9BQU9RLFdBQVcsQ0FBQ0g7UUFDNUI7SUFDRjtJQUVBLElBQUlXLFNBQVMsSUFBSSxDQUFDSCxXQUFXLENBQUNJLEtBQUssQ0FBQ1osUUFBTSxJQUFJLENBQUNPLGdCQUFnQixFQUFFUCxRQUFPLEtBQUksQ0FBQ08sZ0JBQWdCLEdBQUM7SUFDOUYsSUFBSSxDQUFDQSxnQkFBZ0I7SUFFckIsT0FBT0k7QUFDVDtBQUVBOzs7O0NBSUMsR0FFRGQsU0FBU0MsU0FBUyxDQUFDZSxVQUFVLEdBQUc7SUFDOUIsSUFBSUMsT0FBT0MsT0FBT0MsS0FBSyxDQUFDLEtBQUssMkJBQTJCO0lBQ3hELElBQUksQ0FBQ0YsS0FBS0csWUFBWSxFQUFFO1FBQ3RCLE9BQU9DLEtBQUtDLEdBQUcsQ0FBQ0QsS0FBS0UsTUFBTSxLQUFLRixLQUFLRSxNQUFNLEtBQUtDLEtBQUtDLEdBQUcsS0FBSyxHQUFHQyxRQUFRLEtBQ3BFTCxLQUFLQyxHQUFHLENBQUNELEtBQUtFLE1BQU0sS0FBS0YsS0FBS0UsTUFBTSxLQUFLQyxLQUFLQyxHQUFHLEtBQUssR0FBR0MsUUFBUTtJQUN2RTtJQUNBLElBQUksQ0FBQ0MsY0FBYyxHQUFHLElBQUssQ0FBQ0EsY0FBYyxHQUFHLElBQUs7SUFDbERWLEtBQUtHLFlBQVksQ0FBQyxJQUFJLENBQUNPLGNBQWMsRUFBRTtJQUN2QyxJQUFJN0IsT0FBT1EsV0FBVyxFQUFFO1FBQ3RCLElBQUksQ0FBQ0osY0FBYyxDQUFDLElBQUkwQixJQUFJLENBQUNYO0lBQy9CLE9BQU87UUFDTCwwQkFBMEI7UUFDMUI7WUFBQztZQUFHO1lBQUc7U0FBRSxDQUFDWSxPQUFPLENBQUMsU0FBU0MsQ0FBQztZQUMxQmIsS0FBS0csWUFBWSxDQUFDQyxLQUFLRSxNQUFNLEtBQUtGLEtBQUtVLEdBQUcsQ0FBQyxHQUFHLE1BQU0sR0FBR0Q7UUFDekQ7SUFDRjtJQUNBLE9BQU9iLEtBQUtTLFFBQVEsQ0FBQyxVQUFVTSxPQUFPLENBQUMsT0FBTyxLQUFLQSxPQUFPLENBQUMsT0FBTztBQUNwRTtBQUVBOztDQUVDLEdBRURDLFVBQVVDLE9BQU9ELE9BQU8sR0FBRyxJQUFJakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leGFtcm9zaC8uL25vZGVfbW9kdWxlcy9iYXNlNjRpZC9saWIvYmFzZTY0aWQuanM/YjNmMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIGJhc2U2NGlkIHYwLjEuMFxuICovXG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llc1xuICovXG5cbnZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RvclxuICovXG5cbnZhciBCYXNlNjRJZCA9IGZ1bmN0aW9uKCkgeyB9O1xuXG4vKipcbiAqIEdldCByYW5kb20gYnl0ZXNcbiAqXG4gKiBVc2VzIGEgYnVmZmVyIGlmIGF2YWlsYWJsZSwgZmFsbHMgYmFjayB0byBjcnlwdG8ucmFuZG9tQnl0ZXNcbiAqL1xuXG5CYXNlNjRJZC5wcm90b3R5cGUuZ2V0UmFuZG9tQnl0ZXMgPSBmdW5jdGlvbihieXRlcykge1xuXG4gIHZhciBCVUZGRVJfU0laRSA9IDQwOTZcbiAgdmFyIHNlbGYgPSB0aGlzOyAgXG4gIFxuICBieXRlcyA9IGJ5dGVzIHx8IDEyO1xuXG4gIGlmIChieXRlcyA+IEJVRkZFUl9TSVpFKSB7XG4gICAgcmV0dXJuIGNyeXB0by5yYW5kb21CeXRlcyhieXRlcyk7XG4gIH1cbiAgXG4gIHZhciBieXRlc0luQnVmZmVyID0gcGFyc2VJbnQoQlVGRkVSX1NJWkUvYnl0ZXMpO1xuICB2YXIgdGhyZXNob2xkID0gcGFyc2VJbnQoYnl0ZXNJbkJ1ZmZlciowLjg1KTtcblxuICBpZiAoIXRocmVzaG9sZCkge1xuICAgIHJldHVybiBjcnlwdG8ucmFuZG9tQnl0ZXMoYnl0ZXMpO1xuICB9XG5cbiAgaWYgKHRoaXMuYnl0ZXNCdWZmZXJJbmRleCA9PSBudWxsKSB7XG4gICAgIHRoaXMuYnl0ZXNCdWZmZXJJbmRleCA9IC0xO1xuICB9XG5cbiAgaWYgKHRoaXMuYnl0ZXNCdWZmZXJJbmRleCA9PSBieXRlc0luQnVmZmVyKSB7XG4gICAgdGhpcy5ieXRlc0J1ZmZlciA9IG51bGw7XG4gICAgdGhpcy5ieXRlc0J1ZmZlckluZGV4ID0gLTE7XG4gIH1cblxuICAvLyBObyBidWZmZXJlZCBieXRlcyBhdmFpbGFibGUgb3IgaW5kZXggYWJvdmUgdGhyZXNob2xkXG4gIGlmICh0aGlzLmJ5dGVzQnVmZmVySW5kZXggPT0gLTEgfHwgdGhpcy5ieXRlc0J1ZmZlckluZGV4ID4gdGhyZXNob2xkKSB7XG4gICAgIFxuICAgIGlmICghdGhpcy5pc0dlbmVyYXRpbmdCeXRlcykge1xuICAgICAgdGhpcy5pc0dlbmVyYXRpbmdCeXRlcyA9IHRydWU7XG4gICAgICBjcnlwdG8ucmFuZG9tQnl0ZXMoQlVGRkVSX1NJWkUsIGZ1bmN0aW9uKGVyciwgYnl0ZXMpIHtcbiAgICAgICAgc2VsZi5ieXRlc0J1ZmZlciA9IGJ5dGVzO1xuICAgICAgICBzZWxmLmJ5dGVzQnVmZmVySW5kZXggPSAwO1xuICAgICAgICBzZWxmLmlzR2VuZXJhdGluZ0J5dGVzID0gZmFsc2U7XG4gICAgICB9KTsgXG4gICAgfVxuICAgIFxuICAgIC8vIEZhbGwgYmFjayB0byBzeW5jIGNhbGwgd2hlbiBubyBidWZmZXJlZCBieXRlcyBhcmUgYXZhaWxhYmxlXG4gICAgaWYgKHRoaXMuYnl0ZXNCdWZmZXJJbmRleCA9PSAtMSkge1xuICAgICAgcmV0dXJuIGNyeXB0by5yYW5kb21CeXRlcyhieXRlcyk7XG4gICAgfVxuICB9XG4gIFxuICB2YXIgcmVzdWx0ID0gdGhpcy5ieXRlc0J1ZmZlci5zbGljZShieXRlcyp0aGlzLmJ5dGVzQnVmZmVySW5kZXgsIGJ5dGVzKih0aGlzLmJ5dGVzQnVmZmVySW5kZXgrMSkpOyBcbiAgdGhpcy5ieXRlc0J1ZmZlckluZGV4Kys7IFxuICBcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBiYXNlNjQgaWRcbiAqXG4gKiAoT3JpZ2luYWwgdmVyc2lvbiBmcm9tIHNvY2tldC5pbyA8aHR0cDovL3NvY2tldC5pbz4pXG4gKi9cblxuQmFzZTY0SWQucHJvdG90eXBlLmdlbmVyYXRlSWQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciByYW5kID0gQnVmZmVyLmFsbG9jKDE1KTsgLy8gbXVsdGlwbGUgb2YgMyBmb3IgYmFzZTY0XG4gIGlmICghcmFuZC53cml0ZUludDMyQkUpIHtcbiAgICByZXR1cm4gTWF0aC5hYnMoTWF0aC5yYW5kb20oKSAqIE1hdGgucmFuZG9tKCkgKiBEYXRlLm5vdygpIHwgMCkudG9TdHJpbmcoKVxuICAgICAgKyBNYXRoLmFicyhNYXRoLnJhbmRvbSgpICogTWF0aC5yYW5kb20oKSAqIERhdGUubm93KCkgfCAwKS50b1N0cmluZygpO1xuICB9XG4gIHRoaXMuc2VxdWVuY2VOdW1iZXIgPSAodGhpcy5zZXF1ZW5jZU51bWJlciArIDEpIHwgMDtcbiAgcmFuZC53cml0ZUludDMyQkUodGhpcy5zZXF1ZW5jZU51bWJlciwgMTEpO1xuICBpZiAoY3J5cHRvLnJhbmRvbUJ5dGVzKSB7XG4gICAgdGhpcy5nZXRSYW5kb21CeXRlcygxMikuY29weShyYW5kKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBub3Qgc2VjdXJlIGZvciBub2RlIDAuNFxuICAgIFswLCA0LCA4XS5mb3JFYWNoKGZ1bmN0aW9uKGkpIHtcbiAgICAgIHJhbmQud3JpdGVJbnQzMkJFKE1hdGgucmFuZG9tKCkgKiBNYXRoLnBvdygyLCAzMikgfCAwLCBpKTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gcmFuZC50b1N0cmluZygnYmFzZTY0JykucmVwbGFjZSgvXFwvL2csICdfJykucmVwbGFjZSgvXFwrL2csICctJyk7XG59O1xuXG4vKipcbiAqIEV4cG9ydFxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IG5ldyBCYXNlNjRJZCgpO1xuIl0sIm5hbWVzIjpbImNyeXB0byIsInJlcXVpcmUiLCJCYXNlNjRJZCIsInByb3RvdHlwZSIsImdldFJhbmRvbUJ5dGVzIiwiYnl0ZXMiLCJCVUZGRVJfU0laRSIsInNlbGYiLCJyYW5kb21CeXRlcyIsImJ5dGVzSW5CdWZmZXIiLCJwYXJzZUludCIsInRocmVzaG9sZCIsImJ5dGVzQnVmZmVySW5kZXgiLCJieXRlc0J1ZmZlciIsImlzR2VuZXJhdGluZ0J5dGVzIiwiZXJyIiwicmVzdWx0Iiwic2xpY2UiLCJnZW5lcmF0ZUlkIiwicmFuZCIsIkJ1ZmZlciIsImFsbG9jIiwid3JpdGVJbnQzMkJFIiwiTWF0aCIsImFicyIsInJhbmRvbSIsIkRhdGUiLCJub3ciLCJ0b1N0cmluZyIsInNlcXVlbmNlTnVtYmVyIiwiY29weSIsImZvckVhY2giLCJpIiwicG93IiwicmVwbGFjZSIsImV4cG9ydHMiLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/base64id/lib/base64id.js\n");

/***/ })

};
;