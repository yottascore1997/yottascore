"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/cors";
exports.ids = ["vendor-chunks/cors"];
exports.modules = {

/***/ "(rsc)/./node_modules/cors/lib/index.js":
/*!****************************************!*\
  !*** ./node_modules/cors/lib/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n(function() {\n    \"use strict\";\n    var assign = __webpack_require__(/*! object-assign */ \"(rsc)/./node_modules/object-assign/index.js\");\n    var vary = __webpack_require__(/*! vary */ \"(rsc)/./node_modules/vary/index.js\");\n    var defaults = {\n        origin: \"*\",\n        methods: \"GET,HEAD,PUT,PATCH,POST,DELETE\",\n        preflightContinue: false,\n        optionsSuccessStatus: 204\n    };\n    function isString(s) {\n        return typeof s === \"string\" || s instanceof String;\n    }\n    function isOriginAllowed(origin, allowedOrigin) {\n        if (Array.isArray(allowedOrigin)) {\n            for(var i = 0; i < allowedOrigin.length; ++i){\n                if (isOriginAllowed(origin, allowedOrigin[i])) {\n                    return true;\n                }\n            }\n            return false;\n        } else if (isString(allowedOrigin)) {\n            return origin === allowedOrigin;\n        } else if (allowedOrigin instanceof RegExp) {\n            return allowedOrigin.test(origin);\n        } else {\n            return !!allowedOrigin;\n        }\n    }\n    function configureOrigin(options, req) {\n        var requestOrigin = req.headers.origin, headers = [], isAllowed;\n        if (!options.origin || options.origin === \"*\") {\n            // allow any origin\n            headers.push([\n                {\n                    key: \"Access-Control-Allow-Origin\",\n                    value: \"*\"\n                }\n            ]);\n        } else if (isString(options.origin)) {\n            // fixed origin\n            headers.push([\n                {\n                    key: \"Access-Control-Allow-Origin\",\n                    value: options.origin\n                }\n            ]);\n            headers.push([\n                {\n                    key: \"Vary\",\n                    value: \"Origin\"\n                }\n            ]);\n        } else {\n            isAllowed = isOriginAllowed(requestOrigin, options.origin);\n            // reflect origin\n            headers.push([\n                {\n                    key: \"Access-Control-Allow-Origin\",\n                    value: isAllowed ? requestOrigin : false\n                }\n            ]);\n            headers.push([\n                {\n                    key: \"Vary\",\n                    value: \"Origin\"\n                }\n            ]);\n        }\n        return headers;\n    }\n    function configureMethods(options) {\n        var methods = options.methods;\n        if (methods.join) {\n            methods = options.methods.join(\",\"); // .methods is an array, so turn it into a string\n        }\n        return {\n            key: \"Access-Control-Allow-Methods\",\n            value: methods\n        };\n    }\n    function configureCredentials(options) {\n        if (options.credentials === true) {\n            return {\n                key: \"Access-Control-Allow-Credentials\",\n                value: \"true\"\n            };\n        }\n        return null;\n    }\n    function configureAllowedHeaders(options, req) {\n        var allowedHeaders = options.allowedHeaders || options.headers;\n        var headers = [];\n        if (!allowedHeaders) {\n            allowedHeaders = req.headers[\"access-control-request-headers\"]; // .headers wasn't specified, so reflect the request headers\n            headers.push([\n                {\n                    key: \"Vary\",\n                    value: \"Access-Control-Request-Headers\"\n                }\n            ]);\n        } else if (allowedHeaders.join) {\n            allowedHeaders = allowedHeaders.join(\",\"); // .headers is an array, so turn it into a string\n        }\n        if (allowedHeaders && allowedHeaders.length) {\n            headers.push([\n                {\n                    key: \"Access-Control-Allow-Headers\",\n                    value: allowedHeaders\n                }\n            ]);\n        }\n        return headers;\n    }\n    function configureExposedHeaders(options) {\n        var headers = options.exposedHeaders;\n        if (!headers) {\n            return null;\n        } else if (headers.join) {\n            headers = headers.join(\",\"); // .headers is an array, so turn it into a string\n        }\n        if (headers && headers.length) {\n            return {\n                key: \"Access-Control-Expose-Headers\",\n                value: headers\n            };\n        }\n        return null;\n    }\n    function configureMaxAge(options) {\n        var maxAge = (typeof options.maxAge === \"number\" || options.maxAge) && options.maxAge.toString();\n        if (maxAge && maxAge.length) {\n            return {\n                key: \"Access-Control-Max-Age\",\n                value: maxAge\n            };\n        }\n        return null;\n    }\n    function applyHeaders(headers, res) {\n        for(var i = 0, n = headers.length; i < n; i++){\n            var header = headers[i];\n            if (header) {\n                if (Array.isArray(header)) {\n                    applyHeaders(header, res);\n                } else if (header.key === \"Vary\" && header.value) {\n                    vary(res, header.value);\n                } else if (header.value) {\n                    res.setHeader(header.key, header.value);\n                }\n            }\n        }\n    }\n    function cors(options, req, res, next) {\n        var headers = [], method = req.method && req.method.toUpperCase && req.method.toUpperCase();\n        if (method === \"OPTIONS\") {\n            // preflight\n            headers.push(configureOrigin(options, req));\n            headers.push(configureCredentials(options, req));\n            headers.push(configureMethods(options, req));\n            headers.push(configureAllowedHeaders(options, req));\n            headers.push(configureMaxAge(options, req));\n            headers.push(configureExposedHeaders(options, req));\n            applyHeaders(headers, res);\n            if (options.preflightContinue) {\n                next();\n            } else {\n                // Safari (and potentially other browsers) need content-length 0,\n                //   for 204 or they just hang waiting for a body\n                res.statusCode = options.optionsSuccessStatus;\n                res.setHeader(\"Content-Length\", \"0\");\n                res.end();\n            }\n        } else {\n            // actual response\n            headers.push(configureOrigin(options, req));\n            headers.push(configureCredentials(options, req));\n            headers.push(configureExposedHeaders(options, req));\n            applyHeaders(headers, res);\n            next();\n        }\n    }\n    function middlewareWrapper(o) {\n        // if options are static (either via defaults or custom options passed in), wrap in a function\n        var optionsCallback = null;\n        if (typeof o === \"function\") {\n            optionsCallback = o;\n        } else {\n            optionsCallback = function(req, cb) {\n                cb(null, o);\n            };\n        }\n        return function corsMiddleware(req, res, next) {\n            optionsCallback(req, function(err, options) {\n                if (err) {\n                    next(err);\n                } else {\n                    var corsOptions = assign({}, defaults, options);\n                    var originCallback = null;\n                    if (corsOptions.origin && typeof corsOptions.origin === \"function\") {\n                        originCallback = corsOptions.origin;\n                    } else if (corsOptions.origin) {\n                        originCallback = function(origin, cb) {\n                            cb(null, corsOptions.origin);\n                        };\n                    }\n                    if (originCallback) {\n                        originCallback(req.headers.origin, function(err2, origin) {\n                            if (err2 || !origin) {\n                                next(err2);\n                            } else {\n                                corsOptions.origin = origin;\n                                cors(corsOptions, req, res, next);\n                            }\n                        });\n                    } else {\n                        next();\n                    }\n                }\n            });\n        };\n    }\n    // can pass either an options hash, an options delegate, or nothing\n    module.exports = middlewareWrapper;\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/cors/lib/index.js\n");

/***/ })

};
;